#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test of job dependencies (--dependency option).
############################################################################
# Copyright (C) 2004-2007 The Regents of the University of California.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set file_in     "$test_dir/input"
set job_id1     0
set job_id2     0

proc cleanup {} {
	global job_id1 job_id2

	cancel_job [list $job_id1 $job_id2]
}

#
# Build input script files
#
make_bash_script $file_in "$bin_sleep 10"

#
# Spawn a batch job that just sleeps for a while
#
set job_id1 [submit_job -fail "--output=/dev/null --error=/dev/null -t1 $file_in"]

#
# Submit a dependent job
#
set job_id2 [submit_job -fail "--output=/dev/null --dependency=afterany:$job_id1 $file_in"]

#
# Confirm dependency info within second job
#

set match_jobid 0
subtest {[regexp "afterany:($number)" [get_job_param $job_id2 "Dependency"] - match_jobid]} "Verify Dependency info is present"
subtest {$match_jobid == $job_id1} "Verify Dependency information is correct"

#
# Confirm that first job is complete before second job starts
#
wait_for_job -fail $job_id1 "RUNNING"
wait_for_job -fail $job_id2 "PENDING"
set job1_state ""
wait_for -fail {$job1_state != "RUNNING"} {
	set jobs [get_jobs]

	set job1_state [dict get [dict get $jobs $job_id1] "JobState"]
	set job2_state [dict get [dict get $jobs $job_id2] "JobState"]

	subtest {!($job1_state == "RUNNING" && $job2_state == "RUNNING")} "Jobs 1 and 2 should not be RUNNING at the same time"
}

wait_for_job -fail $job_id2 "RUNNING"
subtest {[regexp "COMPLETED|COMPLETING" [get_job_param $job_id1 "JobState"]]} "Job1 should be COMPLETED or COMPLETING when job2 is RUNNING"

set job1_end [convert_time_str [get_job_param $job_id1 "EndTime"] secs]
set job2_start [convert_time_str [get_job_param $job_id2 "StartTime"] secs]

subtest {$job2_start >= $job1_end} "StartTime of job2 should be >= than EndTime of job1"
